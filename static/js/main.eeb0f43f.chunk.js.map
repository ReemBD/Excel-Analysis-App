{"version":3,"sources":["logo.svg","cmps/AppHeader.jsx","services/storageService.js","services/utilService.js","services/excelDataService.js","pages/ExcelTable.jsx","store/store.js","store/reducers/excelReducer.js","cmps/Data/BtnAction.jsx","hooks/useTogglePopover.js","cmps/shared/DefaultActionsPopover/DefaultActionsPopover.jsx","cmps/ExcelPreview.jsx","cmps/ExcelAdd.jsx","cmps/ExcelList.jsx","cmps/Data/DataCorrModal.jsx","cmps/Data/ResListItem.jsx","cmps/Data/ResList.jsx","cmps/Data/DataFilter.jsx","cmps/SheetPreview.jsx","cmps/SheetList.jsx","routes.js","pages/ExcelDetails.jsx","pages/Data.jsx","pages/MyExcels.jsx","pages/FoodAnalysisApp.jsx","App.js","reportWebVitals.js","index.js"],"names":["_AppHeader","className","to","AppHeader","React","memo","storageService","save","key","entity","item","JSON","stringify","localStorage","setItem","load","parse","getItem","utilService","storeToStorage","value","loadFromStorage","data","undefined","getRandomInt","getRandomId","pt1","Date","now","toString","pt2","pt3","toUpperCase","extractColumns","excels","colSet","Set","forEach","sheets","sheet","rows","excelDataService","getHeaderCells","headerCell","add","Array","from","num1","num2","max","min","Math","floor","random","query","excelToAdd","_id","addedAt","id","push","_saveExcels","getById","find","excel","getFilteredCells","mapKey","column","txt","sliceIdx","regex","RegExp","cellsByColMap","state","currSlice","rowsByColArr","Object","values","row","sliceFrom","idx","size","sliceTo","filter","cell","test","_setSliceIdx","keySlice","slice","length","createRowsByColMap","excelsData","doesExistMap","headerCells","rowVals","i","currCell","currKey","STORAGE_KEY","filterBy","cache","firstRow","rowKeys","keys","currSliceIdx","combineReducers","excelReducer","action","type","rootReducer","initialStateCombined","store","createContext","Provider","StateProvider","children","console","log","useReducer","dispatch","onClick","Icon","icon","restOfProps","style","backgroundColor","border","color","useTogglePopover","initialVal","useState","isOpen","setIsOpen","toggle","ref","onClickOutside","ev","title","stopPropagation","MoreHorizIcon","ExcelPreview","withRouter","history","filename","ExcelAdd","useContext","htmlFor","onChange","target","files","toLowerCase","FileReader","reader","filenameRegex","readAsBinaryString","onload","result","match","some","doesAlreadyExist","workbook","XLSX","read","Sheets","SheetNames","map","name","utils","sheet_to_row_object_array","processExcel","readAsArrayBuffer","hidden","ExcelList","DEFAULT_STATE","DataCorrModal","forwardRef","param","setParam","ResListItem","isDataCorrOpen","toggleDataCorr","text","AiOutlineCopy","BsClipboardData","_ResList","filteredRes","onScrollEnd","onScroll","ResList","DataFilter","handleChange","placeholder","colName","SheetPreview","SheetList","routes","path","component","setExcel","useEffect","params","excelToSet","setFilterBy","setFilteredRes","resSliceIdx","setSliceIdx","useCallback","scrollTop","offsetHeight","scrollHeight","excelsToSet","filteredResToSet","filteredResToAdd","table","setTable","tableToSet","excelRows","headerRow","cellTitle","rowValues","val","tableToRender","addExcel","App","route","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","app","StrictMode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eeb0f43f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst _AppHeader = () => {\r\n    return (\r\n        <header className=\"app-header-container p-3\" >\r\n            <div\r\n                className=\"flex justify-between items-center main-layout\">\r\n                <div className=\"logo fg-2\">Mamush</div>\r\n                <nav className=\"main-nav fg-3\">\r\n                    <NavLink to=\"/\" className=\"nav-link\">Home</NavLink>\r\n                    <NavLink to=\"/table\" className=\"nav-link\">Tables</NavLink>\r\n                    <NavLink to=\"/data\" className=\"nav-link\">Data</NavLink>\r\n                </nav>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport const AppHeader = React.memo(_AppHeader)","\r\nexport const storageService = {\r\n    save,\r\n    load\r\n}\r\n\r\nfunction save(key, entity) {\r\n    var item = JSON.stringify(entity)\r\n    localStorage.setItem(key, item)\r\n}\r\n\r\nfunction load(key) {\r\n    return JSON.parse(localStorage.getItem(key))\r\n}","'use strict';\r\n\r\nimport { excelDataService } from \"./excelDataService\";\r\n\r\nexport const utilService = {\r\n    storeToStorage,\r\n    loadFromStorage,\r\n    getRandomInt,\r\n    getRandomId,\r\n    extractColumns\r\n}\r\n\r\nfunction storeToStorage(key, value) {\r\n    localStorage.setItem(key, JSON.stringify(value) || null);\r\n}\r\nfunction loadFromStorage(key) {\r\n    let data = localStorage.getItem(key);\r\n    return (data) ? JSON.parse(data) : undefined;\r\n}\r\n\r\n\r\nfunction getRandomId() {\r\n    var pt1 = Date.now().toString(16);\r\n    var pt2 = getRandomInt(1000, 9999).toString(16);\r\n    var pt3 = getRandomInt(1000, 9999).toString(16);\r\n    return `${pt3}-${pt1}-${pt2}`.toUpperCase();\r\n}\r\n\r\nfunction getRandomInt(num1, num2) {\r\n    var max = (num1 >= num2) ? num1 + 1 : num2 + 1;\r\n    var min = (num1 <= num2) ? num1 : num2;\r\n    return (Math.floor(Math.random() * (max - min)) + min);\r\n}\r\n\r\n\r\nfunction extractColumns(excels) {\r\n\r\n    const colSet = new Set()\r\n\r\n    excels.forEach(({ sheets }) => {\r\n        sheets.forEach((sheet) => {\r\n            const { rows } = sheet\r\n            const currHeaderCells = excelDataService.getHeaderCells(rows[0])\r\n            currHeaderCells.forEach(headerCell => {\r\n                colSet.add(headerCell)\r\n            })\r\n        })\r\n    })\r\n\r\n    return Array.from(colSet)\r\n}\r\n","import { storageService } from './storageService'\r\nimport { utilService } from './utilService'\r\n\r\nexport const excelDataService = {\r\n    query,\r\n    add,\r\n    getById,\r\n    getFilteredCells,\r\n    createRowsByColMap,\r\n    getHeaderCells\r\n}\r\n\r\nconst STORAGE_KEY = 'excels'\r\nconst state = {\r\n    filterBy: { column: '', txt: '' },\r\n    currSlice: {\r\n        idx: 0,\r\n        size: 50\r\n    },\r\n    cellsByColMap: {\r\n    },\r\n    cache: {\r\n\r\n    }\r\n}\r\n\r\nfunction query() {\r\n    const excels = storageService.load(STORAGE_KEY) || []\r\n    return excels\r\n}\r\n\r\nfunction getFilteredCells({ column, txt }, sliceIdx = 0) {\r\n    const regex = new RegExp(txt)\r\n    const { cellsByColMap, currSlice } = state\r\n\r\n    let mapKey;\r\n    if (column) {\r\n        mapKey = cellsByColMap[column]\r\n    } else {\r\n        mapKey = []\r\n        const rowsByColArr = Object.values(cellsByColMap)\r\n        rowsByColArr.forEach(row => mapKey.push(...row))\r\n    }\r\n\r\n    const sliceFrom = currSlice.idx * currSlice.size\r\n    const sliceTo = sliceFrom + currSlice.size\r\n\r\n    if (!mapKey[sliceFrom]) return null\r\n    if (txt) mapKey = mapKey.filter(cell => regex.test(cell.txt))\r\n\r\n    _setSliceIdx(sliceIdx)\r\n    const keySlice = mapKey.slice(sliceFrom, mapKey[sliceTo] ? sliceTo : mapKey.length)\r\n\r\n    return keySlice\r\n}\r\n\r\nfunction createRowsByColMap(excels) {\r\n    const { cellsByColMap } = state\r\n    let excelsData = excels || query()\r\n    let doesExistMap = {}\r\n\r\n    excelsData.forEach(excel => {\r\n        excel.sheets.forEach(sheet => {\r\n            const headerCells = getHeaderCells(sheet.rows[0])\r\n            sheet.rows.forEach(row => {\r\n                const rowVals = Object.values(row)\r\n                for (let i = 0; i < rowVals.length; i++) {\r\n                    const currCell = { txt: rowVals[i] }\r\n                    const currKey = cellsByColMap[headerCells[i]]\r\n                    if (!doesExistMap[currCell.txt] && currKey) {\r\n                        cellsByColMap[headerCells[i]].push(currCell)\r\n                        doesExistMap[currCell.txt] = true\r\n                    } else if (!currKey) {\r\n                        cellsByColMap[headerCells[i]] = [currCell]\r\n                        doesExistMap[currCell.txt] = true\r\n                    }\r\n                }\r\n                // for (const col in row) {\r\n                //     const currCell = { txt: row[col] }\r\n                //     const currKey = regex.test(col) ? cellsByColMap[row[0]] : cellsByColMap[col]\r\n                //     if (currKey && !doesExistMap[currCell.txt]) {\r\n                //         doesExistMap[currCell.txt] = true\r\n                //         cellsByColMap[col].push(currCell)\r\n                //     }\r\n                //     else if (!currKey) {\r\n                //         cellsByColMap[col] = [currCell]\r\n                //         doesExistMap[currCell.txt] = true\r\n                //     }\r\n                // }\r\n            })\r\n        })\r\n    })\r\n}\r\n\r\nfunction getHeaderCells(firstRow) {\r\n    const regex = new RegExp('__EMPTY')\r\n    const rowKeys = Object.keys(firstRow)\r\n    return regex.test(rowKeys) ? Object.values(firstRow) : rowKeys\r\n}\r\n\r\nfunction _setSliceIdx(idx) {\r\n    state.currSliceIdx = idx\r\n}\r\n\r\nfunction add(excelToAdd) {\r\n    excelToAdd._id = utilService.getRandomId()\r\n    excelToAdd.addedAt = Date.now()\r\n    excelToAdd.sheets.forEach(sheet => {\r\n        sheet.id = utilService.getRandomId()\r\n    })\r\n    const excels = query()\r\n    excels.push(excelToAdd)\r\n    _saveExcels(excels)\r\n    return excelToAdd\r\n}\r\n\r\nfunction getById(id) {\r\n    return query().find(excel => excel._id === id)\r\n}\r\n\r\nfunction _saveExcels(excels) {\r\n    storageService.save(STORAGE_KEY, excels)\r\n    return excels\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport { excelDataService } from 'services/excelDataService'\r\n\r\nexport const ExcelTable = ({ match }) => {\r\n    const [table, setTable] = useState(null)\r\n\r\n    useEffect(() => {\r\n        const { id } = match.params\r\n        const tableToSet = excelDataService.getById(id)\r\n        setTable(tableToSet)\r\n    }, [])\r\n\r\n    if (!table) return <h1>Loading...</h1>\r\n\r\n    const tableToRender = () => {\r\n        const { excelRows: rows } = table\r\n        const headerRow = Object.keys(rows[0])\r\n        return <table className=\"main-layout\">\r\n            <tr className=\"table-head\">\r\n                {headerRow.map(cellTitle => <th key={cellTitle}>{cellTitle}</th>)}\r\n            </tr>\r\n            {rows.map(row => {\r\n                const rowValues = Object.values(row)\r\n                return <tr>\r\n                    {rowValues.map(val => <td key={val}>{val}</td>)}\r\n                </tr>\r\n            })}\r\n        </table>\r\n    }\r\n\r\n    return (\r\n        <div className=\"excel-table\">\r\n            {tableToRender()}\r\n        </div>\r\n    )\r\n}\r\n","// import { combineReducers, createStore, compose } from 'redux'\r\n// import { excelReducer } from 'store/reducers/excelReducer'\r\n\r\n// const rootReducer = combineReducers({\r\n//     excelReducer\r\n// })\r\n\r\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\n// export const store = createStore(rootReducer, composeEnhancers())\r\n\r\nimport React, { createContext, useReducer } from 'react';\r\nimport combineReducers from 'react-combine-reducers';\r\nimport { excelReducer } from 'store/reducers/excelReducer'\r\n\r\nconst initialState = {\r\n    excelReducer: {\r\n        excels: null\r\n    }\r\n}\r\n\r\nconst [rootReducer, initialStateCombined] = combineReducers(\r\n    { excelReducer: [excelReducer, initialState.excelReducer] }\r\n);\r\n\r\nconst store = createContext(initialStateCombined);\r\nconst { Provider } = store;\r\n\r\nconst StateProvider = ({ children }) => {\r\n    console.log({ rootReducer, initialStateCombined });\r\n    const [state, dispatch] = useReducer(rootReducer, initialStateCombined)\r\n    return <Provider value={{ state, dispatch }}>{children}</Provider>;\r\n};\r\n\r\nexport { store, StateProvider }","\r\nexport function excelReducer(state, action) {\r\n\r\n    switch (action.type) {\r\n        case 'SET_EXCELS':\r\n            return { ...state, excels: action.excels }\r\n        case 'ADD_EXCEL':\r\n            return { ...state, excels: [...state.excels, action.excel] }\r\n        default:\r\n            return state\r\n    };\r\n}","import React from 'react'\r\n\r\nexport default ({ onClick, icon: Icon, className, ...restOfProps }) => {\r\n\r\n    const btnClearStyle = {\r\n        backgroundColor: 'transparent',\r\n        border: 'none',\r\n        color: 'inherit'\r\n    }\r\n\r\n    return (\r\n        <button onClick={onClick} style={btnClearStyle} >\r\n            <Icon\r\n                {...restOfProps}\r\n                className={`btn-action ${className}`}\r\n            />\r\n        </button>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport onClickOutside from \"react-cool-onclickoutside\"\r\n\r\nexport function useTogglePopover(initialVal = false) {\r\n    let [isOpen, setIsOpen] = useState(initialVal)\r\n    const toggle = () => {\r\n        setIsOpen(!isOpen)\r\n    }\r\n\r\n    const ref = onClickOutside((ev) => {\r\n        if (isOpen) setIsOpen(false)\r\n    });\r\n\r\n    return [isOpen, toggle, ref]\r\n}","import React, { useState } from 'react'\r\nimport { AiOutlineMore as MoreHorizIcon } from 'react-icons/ai'\r\nimport onClickOutside from \"react-cool-onclickoutside\"\r\nimport BtnShowActions from 'cmps/Data/BtnAction'\r\nimport { useTogglePopover } from 'hooks/useTogglePopover'\r\n\r\nexport default ({ className, children, title }) => {\r\n\r\n    const [isOpen, toggle, ref] = useTogglePopover(false)\r\n    // const toggle = () => setIsOpen(!isOpen)\r\n\r\n    // const ref = onClickOutside((ev) => {\r\n    //     if (isOpen) setIsOpen(false)\r\n    // });\r\n\r\n    return (\r\n        <div ref={ref} onClick={(ev) => {\r\n            ev.stopPropagation()\r\n\r\n        }} className=\"default-actions-popover-container\">\r\n            {/* <MoreHorizIcon onClick={toggle} className=\"btn-actions\" /> */}\r\n            <BtnShowActions\r\n                icon={MoreHorizIcon}\r\n                className=\"btn-actions\"\r\n                onClick={toggle}\r\n                size={30}\r\n            />\r\n            {isOpen &&\r\n                <div className={`default-actions-popover ${className}`}>\r\n                    <h3 className=\"default-actions-popover-header\">{title}</h3>\r\n                    <ul className=\"default-actions-popover-list clear-list\">\r\n                        {children}\r\n                    </ul>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { withRouter } from 'react-router'\r\nimport { AiOutlineMore } from 'react-icons/ai'\r\nimport  ExcelActionsPopover  from 'cmps/shared/DefaultActionsPopover/DefaultActionsPopover'\r\n\r\nconst _ExcelPreview = ({ excel, history }) => {\r\n\r\n    const { filename } = excel\r\n    const [isActionsOpen, toggleActions] = useState(false)\r\n\r\n    return (\r\n\r\n        <div className=\"excel-preview cursor-pointer flex flex-col\" onClick={() => { history.push(`/excel/${excel._id}`) }}>\r\n\r\n            <ExcelActionsPopover title=\"Excel Actions\">\r\n                <li>Delete Excel</li>\r\n                <li>Change Name</li>\r\n            </ExcelActionsPopover>\r\n            <div className=\"preview-img-container flex-grow\">\r\n                {/* <iframe width=\"100%\" height=\"200\" src={`/table/${excel._id}`}></iframe> */}\r\n                <img />\r\n            </div>\r\n            <h3 className=\"title py-2\">{filename}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const ExcelPreview = withRouter(_ExcelPreview)\r\n","import React, { useContext, useState } from 'react'\r\nimport { excelDataService } from 'services/excelDataService'\r\nimport { AiFillFileAdd } from 'react-icons/ai'\r\nimport XLSX from 'xlsx'\r\nimport { store } from 'store/store'\r\n\r\nexport const ExcelAdd = () => {\r\n\r\n    const { dispatch, state } = useContext(store)\r\n\r\n    function upload({ target: { files, value } }) {\r\n        const regex = /^([a-zA-Z\\u0590-\\u05fe0-9\\s_\\\\.,\\-:])+(.xls|.xlsx)$/\r\n        if (regex.test(value.toLowerCase())) {\r\n            if (typeof (FileReader) !== undefined) {\r\n                const reader = new FileReader()\r\n                const filenameRegex = /[ a-zA-Z\\u0590-\\u05fe0-9_]+?(?=\\.)/\r\n                if (reader.readAsBinaryString) {\r\n                    reader.onload = ({ target: { result } }) => {\r\n                        const filename = value.match(filenameRegex)[0]\r\n                        if (doesAlreadyExist(filename)) {\r\n\r\n                        }\r\n                        const sheets = processExcel(result)\r\n                        const excel = { sheets, filename }\r\n                        const excelToAdd = excelDataService.add(excel)\r\n                        dispatch({ type: 'ADD_EXCEL', excel })\r\n                    }\r\n                    reader.readAsBinaryString(files[0])\r\n                } else {\r\n                    reader.onload = (ev) => {\r\n                        reader.readAsArrayBuffer(files[0])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function doesAlreadyExist(filename) {\r\n        const { excels } = state.excelReducer\r\n        return excels.some(excel => excel.filename === filename)\r\n    }\r\n\r\n    function processExcel(data) {\r\n        const workbook = XLSX.read(data, {\r\n            type: 'binary'\r\n        })\r\n\r\n        const { Sheets, SheetNames } = workbook\r\n\r\n        const excelSheets = SheetNames.map(name => {\r\n            const rows = XLSX.utils.sheet_to_row_object_array(Sheets[name])\r\n            const sheet = {\r\n                name,\r\n                rows\r\n            }\r\n            return sheet\r\n        })\r\n\r\n        return excelSheets\r\n    }\r\n\r\n    return (\r\n        <div className=\"excel-add excel-preview\">\r\n            <label className=\"upload-label font-sans flex justify-center cursor-pointer\" htmlFor=\"uploader\">\r\n                <AiFillFileAdd size={40} className=\" self-center\" />\r\n            </label>\r\n            <input onChange={upload} hidden\r\n\r\n                type=\"file\" id=\"uploader\" />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { ExcelPreview } from './ExcelPreview'\r\nimport { ExcelAdd } from './ExcelAdd'\r\nexport const ExcelList = ({ excels }) => {\r\n    return (\r\n        <div className=\"excel-list grid lg:grid-cols-6 sm:grid-cols-4 main-layout\">\r\n            {excels.map(excel => <ExcelPreview key={excel._id} excel={excel} />)}\r\n            <ExcelAdd />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nconst DEFAULT_STATE = {\r\n    txt: ''\r\n}\r\n\r\nexport const DataCorrModal = React.forwardRef(({ isOpen }, ref) => {\r\n\r\n    const [param, setParam] = useState(DEFAULT_STATE)\r\n\r\n    function handleChange({ target: { name, value } }) {\r\n        setParam({ ...param, [name]: value })\r\n    }\r\n\r\n    return (\r\n        <div ref={ref}\r\n            className={`data-corr-modal ${isOpen && 'open'}`}\r\n        >\r\n            <input\r\n                type=\"text\"\r\n                className=\"default-input\"\r\n                value={param.txt}\r\n                onChange={handleChange}\r\n            />\r\n            <h3>Hello from data corr modal</h3>\r\n            <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Pariatur dolorem veniam cupiditate labore at hic officia veritatis, placeat corporis totam!</p>\r\n        </div >\r\n    )\r\n})\r\n\r\n/*  */","import React, { useState } from 'react'\r\nimport onClickOutside from \"react-cool-onclickoutside\"\r\nimport { AiOutlineCopy } from 'react-icons/ai'\r\nimport { BsClipboardData } from 'react-icons/bs'\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport BtnCopy from './BtnAction';\r\nimport BtnOpenCorr from './BtnAction';\r\nimport { useTogglePopover } from 'hooks/useTogglePopover';\r\nimport { DataCorrModal } from './DataCorrModal';\r\n\r\nexport const ResListItem = ({ className, children }) => {\r\n    const [isDataCorrOpen, toggleDataCorr, ref] = useTogglePopover()\r\n\r\n    return (\r\n        <li className={`${className}`}>\r\n            <div className=\"text\">{children}</div>\r\n            <CopyToClipboard text={children}>\r\n                < BtnCopy\r\n                    icon={AiOutlineCopy}\r\n                    size={30}\r\n                    title='Copy to Clipboard'\r\n                />\r\n            </CopyToClipboard>\r\n            <div className=\"data-corr\">\r\n                <BtnOpenCorr\r\n                    icon={BsClipboardData}\r\n                    size={30}\r\n                    title='Correlate Data'\r\n                    className={\"btn-open-data-corr\"}\r\n                    onClick={() => toggleDataCorr(!isDataCorrOpen)}\r\n                /> \r\n                    <DataCorrModal isOpen={isDataCorrOpen} ref={ref} />\r\n                \r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\n// export const ResListItem = React.memo(_ResListItem)","import React from 'react'\r\nimport { utilService } from 'services/utilService'\r\nimport { ResListItem } from 'cmps/Data/ResListItem'\r\n\r\nconst _ResList = ({ filteredRes, onScrollEnd }) => {\r\n\r\n\r\n    return (\r\n        <ul onScroll={onScrollEnd} className=\"filtered-cells-list list-none flex flex-col items-start\">\r\n            {filteredRes.map(cell =>\r\n                <ResListItem\r\n                    key={utilService.getRandomId()}\r\n                    className={\"filtered-cells-list-item p-3 text-left flex justify-between items-center\"}> {cell.txt}\r\n                </ResListItem>\r\n            )}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport const ResList = React.memo(_ResList)\r\n","import React from 'react'\r\nimport { utilService } from 'services/utilService'\r\n\r\nexport const DataFilter = ({ excels, filterBy, handleChange }) => {\r\n\r\n    return (\r\n        <section className=\"data-filter flex items-center justify-between data-grid-layout\">\r\n            <input type=\"text\" className=\"search-input\" name=\"txt\" value={filterBy.txt} onChange={handleChange} placeholder=\"Search...\" />\r\n\r\n            <select className=\"col-filter\" id=\"colSearch\" name=\"column\" value={filterBy.column} onChange={handleChange} >\r\n                <option value=\"\">All</option>\r\n                {utilService.extractColumns(excels).map(colName => <option key={colName} value={colName}>{colName}</option>)}\r\n            </select>\r\n\r\n        </section>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const SheetPreview = ({ sheet }) => {\r\n\r\n    const { name } = sheet\r\n    return (\r\n        <div className=\"sheet-preview cursor-pointer p-2 flex justify-between\">\r\n            <span className=\"sheet-name\">{name}</span>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { SheetPreview } from './SheetPreview'\r\n\r\nexport const SheetList = ({ sheets }) => {\r\n    return (\r\n        <div className=\"sheet-list flex flex-col\">\r\n            {sheets.map(sheet => <SheetPreview key={sheet.id} sheet={sheet} />)}\r\n        </div>\r\n    )\r\n}\r\n","import { ExcelTable } from \"pages/ExcelTable\";\r\nimport { FoodAnalysisApp } from \"pages/FoodAnalysisApp\";\r\nimport { MyExcels } from \"pages/MyExcels\";\r\nimport { Data } from 'pages/Data'\r\nimport { ExcelDetails } from \"pages/ExcelDetails\";\r\n\r\nexport const routes = [\r\n    {\r\n        key: 'akmlk4fr90ifrepfk',\r\n        path: '/excel/:id',\r\n        component: ExcelDetails\r\n    },\r\n    {\r\n        key: 'cso49fpmn94jdslsn',\r\n        path: '/data',\r\n        component: Data\r\n\r\n    },\r\n    {\r\n        key: 'mk4lt090ap2',\r\n        path: '/table/:id',\r\n        component: ExcelTable\r\n    },\r\n    {\r\n        key: '23mkls0o4lz;',\r\n        path: '/table',\r\n        component: MyExcels\r\n    },\r\n    {\r\n        key: 'alm23rsasfaw3',\r\n        path: '/',\r\n        component: FoodAnalysisApp\r\n    }\r\n]\r\n","import { SheetList } from 'cmps/SheetList'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { excelDataService } from 'services/excelDataService'\r\n\r\nexport const ExcelDetails = ({ match }) => {\r\n    const [excel, setExcel] = useState(null)\r\n\r\n    useEffect(() => {\r\n        const { id } = match.params\r\n        const excelToSet = excelDataService.getById(id)\r\n        setExcel(excelToSet)\r\n    }, [])\r\n\r\n    if (!excel) return <h1>Loading...</h1>\r\n\r\n    return (\r\n        <div className=\"excel-details main-layout\">\r\n            <SheetList\r\n                sheets={excel.sheets}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useCallback, useContext, useEffect, useState } from 'react'\r\nimport { excelDataService } from 'services/excelDataService'\r\nimport { utilService } from 'services/utilService'\r\nimport { store } from 'store/store'\r\nimport { ResList } from 'cmps/Data/ResList'\r\nimport { ResListItem } from 'cmps/Data/ResListItem'\r\nimport { DataFilter } from 'cmps/Data/DataFilter'\r\n// import { DataCorrelation } from 'cmps/Data/DataCorrelation'\r\nexport const Data = () => {\r\n\r\n    const { state, dispatch } = useContext(store)\r\n    const { excels } = state.excelReducer\r\n    const [filterBy, setFilterBy] = useState({ column: '', txt: '' })\r\n    const [filteredRes, setFilteredRes] = useState(null)\r\n    const [resSliceIdx, setSliceIdx] = useState(0)\r\n\r\n    const onScrollEnd = useCallback(({ target: { scrollTop, offsetHeight, scrollHeight } }) => {\r\n        if (scrollTop + offsetHeight >= scrollHeight) {\r\n            setSliceIdx(resSliceIdx + 1)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let excelsToSet = excels\r\n        if (!excelsToSet) {\r\n            excelsToSet = [...excelDataService.query()]\r\n            dispatch({ type: 'SET_EXCELS', excels: excelsToSet })\r\n        }\r\n        excelDataService.createRowsByColMap(excelsToSet)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const filteredResToSet = excelDataService.getFilteredCells(filterBy)\r\n        setFilteredRes(filteredResToSet)\r\n    }, [filterBy])\r\n\r\n    useEffect(() => {\r\n        if (!resSliceIdx) return\r\n        const filteredResToAdd = excelDataService.getFilteredCells(filterBy, resSliceIdx)\r\n        if (!filteredResToAdd) return\r\n        setFilteredRes([...filteredRes, ...filteredResToAdd])\r\n    }, [resSliceIdx])\r\n\r\n    function handleChange({ target: { name, value } }) {\r\n        if (name === 'column') setSliceIdx(0)\r\n        setFilterBy({ ...filterBy, [name]: value })\r\n    }\r\n\r\n\r\n    if (!excels) return <h1>Loading...</h1>\r\n\r\n    return (\r\n        <div className=\"data-page main-layout grid content-center justify-items-center\">\r\n            <DataFilter\r\n                excels={excels}\r\n                filterBy={filterBy}\r\n                handleChange={handleChange}\r\n            />\r\n            <section\r\n                className=\"search-results flex flex-col data-grid-layout\">\r\n                {filteredRes && <ResList\r\n                    filteredRes={filteredRes}\r\n                    onScrollEnd={onScrollEnd}\r\n                />}\r\n            </section>\r\n\r\n        </div >\r\n    )\r\n}\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport { store } from 'store/store'\r\nimport { ExcelList } from '../cmps/ExcelList'\r\nimport { excelDataService } from '../services/excelDataService'\r\nexport const MyExcels = () => {\r\n\r\n    const { dispatch, state } = useContext(store)\r\n    const { excels } = state.excelReducer\r\n\r\n    useEffect(() => {\r\n        const excelsToSet = [...excelDataService.query()]\r\n        dispatch({ type: 'SET_EXCELS', excels: excelsToSet })\r\n    }, [])\r\n\r\n    function addExcel(excel) {\r\n        dispatch({ type: 'ADD_EXCEL', excel })\r\n    }\r\n\r\n    if (!excels) return <h1>Loading...</h1>\r\n\r\n    return (\r\n        <div className=\"my-excels\">\r\n            <ExcelList excels={excels} addExcel={addExcel} />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nexport const FoodAnalysisApp = () => {\r\n\r\n    return (\r\n        <div\r\n            className=\"food-analysis-app-page\"\r\n        >\r\n            <h3>Hello from food analysis app</h3>\r\n        </div>\r\n    )\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport './assets/styles/styles.scss';\nimport { FoodAnalysisApp } from './pages/FoodAnalysisApp';\nimport { AppHeader } from 'cmps/AppHeader';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { routes } from 'routes';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <AppHeader />\n        {routes.map(route => <Route exact {...route} />)}\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { StateProvider } from 'store/store'\nconst app = (\n  < React.StrictMode >\n    <StateProvider>\n      <App />\n    </StateProvider>\n  </ React.StrictMode >\n)\n\nReactDOM.render(\n  app,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}